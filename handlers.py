# import subprocess
# import asyncio
# import random
# import string
from telebot import types
from config import *
from database import Database
from utils import get_external_ip, get_saved_wan_ip, save_wan_ip, setup_port_forwarding
# from cryptography.fernet import Fernet

db = Database('bot.db')

# cipher_suite = Fernet(FERNET_KEY)
session_start_time = None
bot_messages = {}
next_step_handlers = {}
async def delete_last_bot_messages(bot, chat_id):
    if chat_id in bot_messages:
        for message_id in bot_messages[chat_id]:
            try:
                await bot.delete_message(chat_id=chat_id, message_id=message_id)
            except Exception as e:
                print(f"Failed to delete message {message_id}: {e}")
        bot_messages[chat_id] = []

async def save_bot_message(chat_id, message):
    if chat_id not in bot_messages:
        bot_messages[chat_id] = []
    bot_messages[chat_id].append(message.message_id)

async def start_handler(bot, message: types.Message):
    if message.from_user.id != int(ADMIN_ID):
        await auth_msg(bot, message)
        return

    await db.add_user(message.from_user.id)
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    get_ip_btn = types.KeyboardButton('üîπ –ü–æ–ª—É—á–∏—Ç—å IP üîπ')
    user_mgmt_btn = types.KeyboardButton('üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ üë•')
    settings_btn = types.KeyboardButton('‚ö†Ô∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚ö†Ô∏è')
    markup.add(get_ip_btn, user_mgmt_btn, settings_btn)
    sent_message = await bot.send_message(message.chat.id, "ü´ß–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—éü´ß", reply_markup=markup)

    try:
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    except Exception as e:
        print(f"Failed to delete user message {message.message_id}: {e}")
    await delete_last_bot_messages(bot, message.chat.id)
    await save_bot_message(message.chat.id, sent_message)


async def handle_buttons(bot, message: types.Message):
    if not await db.user_exists(message.from_user.id):
        await auth_msg(bot, message)
        return
    if message.chat.id in next_step_handlers:
        await next_step_handlers[message.chat.id](bot, message)
    elif message.text == 'üîπ –ü–æ–ª—É—á–∏—Ç—å IP üîπ':
        await get_ip_handler(bot, message)
    elif message.text == 'üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ üë•':
        await manage_users_menu(bot, message)
    elif message.text == 'üü¢ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üü¢':
        await add_user_handler(bot, message)
    elif message.text == 'üî¥ –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üî¥':
        await remove_user_handler(bot, message)
    elif message.text == '‚ö†Ô∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚ö†Ô∏è':
        await additional_settings_menu(bot, message)
    # elif message.text == '‚ùå WEB-APP ssh/ftp ‚ùå':
    #     await webapp_ssh_ftp_handler(bot, message)
    elif message.text == 'üçÄ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–±—Ä–æ—Å–∏—Ç—å –ø–æ—Ä—Ç üçÄ':
        await force_port_forwarding_handler(bot, message)
    elif message.text == 'üî∫ –ù–∞–∑–∞–¥ üî∫':
        await start_handler(bot, message)

# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
# –§—É–Ω–∫—Ü–∏—è –Ω–µ –¥–æ–ø–∏—Å–∞–Ω–∞, –ø—Ä–æ–±–ª–µ–º—ã: –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤(—Å–∞–º–æ–ø–æ–¥–ø–∏—Å–Ω—ã–µ –Ω–µ –ø–æ–¥—Ö–æ–¥—è—Ç), ssh/ftp  –¥–æ—Å—Ç—É–ø –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã –∏ –Ω–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–ª–∏—Å—å (–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞) #
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------#

# async def webapp_ssh_ftp_handler(bot, message: types.Message):
#     print("Handling WEB-APP ssh/ftp")
    # global session_start_time, hashed_password
    #
    # if message.from_user.id != int(ADMIN_ID):
    #     await auth_msg(bot, message)
    #     return
    #
    # waiting_message = await bot.send_message(message.chat.id, "–¢–µ—Ä–ø–µ–Ω–∏–µ, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")
    # await save_bot_message(message.chat.id, waiting_message)
    #
    # markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    # get_ip_btn = types.KeyboardButton('üîπ –ü–æ–ª—É—á–∏—Ç—å IP üîπ')
    # user_mgmt_btn = types.KeyboardButton('üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ üë•')
    # settings_btn = types.KeyboardButton('‚ö†Ô∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚ö†Ô∏è')
    # markup.add(get_ip_btn, user_mgmt_btn, settings_btn)
    #
    # if session_start_time and (asyncio.get_event_loop().time() - session_start_time < webapp_runtime_minutes * 60):
    #     external_ip = await get_external_ip()
    #     decrypted_password = cipher_suite.decrypt(hashed_password.encode()).decode()
    #     try:
    #         sent_message = await bot.edit_message_text(chat_id=message.chat.id, message_id=waiting_message.message_id,
    #                                                    text=f"–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ.\nIP: `{external_ip}:{webapp_wan_port}`\n–ü–∞—Ä–æ–ª—å: `{decrypted_password}`",
    #                                                    reply_markup=markup, parse_mode='Markdown')
    #         await delete_last_bot_messages(bot, message.chat.id)
    #         await save_bot_message(message.chat.id, sent_message)
    #     except Exception as e:
    #         sent_message = await bot.send_message(message.chat.id,
    #                                               f"–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ.\nIP: `{external_ip}:{webapp_wan_port}`\n–ü–∞—Ä–æ–ª—å: `{decrypted_password}`",
    #                                               reply_markup=markup, parse_mode='Markdown')
    #         await delete_last_bot_messages(bot, message.chat.id)
    #         await save_bot_message(message.chat.id, sent_message)
    #     try:
    #         await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    #     except Exception as e:
    #         print(f"Failed to delete user message {message.message_id}: {e}")
    #     return
    #
    # # –ü—Ä–æ–±—Ä–æ—Å –ø–æ—Ä—Ç–∞
    # await setup_port_forwarding(local_ip, webapp_local_port, webapp_wan_port)
    #
    # # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è
    # new_password = ''.join(random.choices(string.ascii_letters + string.digits, k=12))
    # encrypted_password = cipher_suite.encrypt(new_password.encode()).decode()
    #
    # # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π hashed_password –∏ –∑–∞–ø–∏—Å—å –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ —Å–µ—Å—Å–∏–∏
    # hashed_password = encrypted_password
    # session_start_time = asyncio.get_event_loop().time()
    #
    # # –ó–∞–ø–∏—Å—å –ø–∞—Ä–æ–ª—è –≤ —Ñ–∞–π–ª
    # with open('webapp/hashed_password.txt', 'w') as f:
    #     f.write(hashed_password)
    #
    # external_ip = await get_external_ip()
    # try:
    #     sent_message = await bot.edit_message_text(chat_id=message.chat.id, message_id=waiting_message.message_id,
    #                                                text=f"–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É {webapp_wan_port} –≤ —Ç–µ—á–µ–Ω–∏–µ {webapp_runtime_minutes} –º–∏–Ω—É—Ç.\nIP: `{external_ip}:{webapp_wan_port}`\n–ü–∞—Ä–æ–ª—å: `{new_password}`",
    #                                                reply_markup=markup, parse_mode='Markdown')
    #     await delete_last_bot_messages(bot, message.chat.id)
    #     await save_bot_message(message.chat.id, sent_message)
    # except Exception as e:
    #     sent_message = await bot.send_message(message.chat.id,
    #                                           f"–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É {webapp_wan_port} –≤ —Ç–µ—á–µ–Ω–∏–µ {webapp_runtime_minutes} –º–∏–Ω—É—Ç.\nIP: `{external_ip}:{webapp_wan_port}`\n–ü–∞—Ä–æ–ª—å: `{new_password}`",
    #                                           reply_markup=markup, parse_mode='Markdown')
    #     await delete_last_bot_messages(bot, message.chat.id)
    #     await save_bot_message(message.chat.id, sent_message)
    #
    # # –ó–∞–ø—É—Å–∫ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    # process = subprocess.Popen(["python", "path_to_your_webapp.py"])
    #
    # # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
    # await asyncio.sleep(webapp_runtime_minutes * 60)
    # process.terminate()
    # sent_message = await bot.send_message(message.chat.id, "–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=markup)
    # await save_bot_message(message.chat.id, sent_message)
    # try:
    #     await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    # except Exception as e:
    #     print(f"Failed to delete user message {message.message_id}: {e}")

async def get_ip_handler(bot, message: types.Message):
    if not await db.user_exists(message.from_user.id):
        await auth_msg(bot, message)
        return

    waiting_message = await bot.send_message(message.chat.id, "–ü–æ–ª—É—á–µ–Ω–∏–µ IP –∞–¥—Ä–µ—Å–∞...")
    await save_bot_message(message.chat.id, waiting_message)

    current_wan_ip = await get_external_ip()
    saved_wan_ip = await get_saved_wan_ip()

    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    get_ip_btn = types.KeyboardButton('üîπ –ü–æ–ª—É—á–∏—Ç—å IP üîπ')
    user_mgmt_btn = types.KeyboardButton('üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ üë•')
    settings_btn = types.KeyboardButton('‚ö†Ô∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚ö†Ô∏è')
    markup.add(get_ip_btn, user_mgmt_btn, settings_btn)

    if current_wan_ip and current_wan_ip != saved_wan_ip:
        await setup_port_forwarding(local_ip, local_port, wan_port)
        await save_wan_ip(current_wan_ip)
        try:
            sent_message = await bot.edit_message_text(chat_id=message.chat.id, message_id=waiting_message.message_id,
                                                       text=f"–í–∞—à –≤–Ω–µ—à–Ω–∏–π IP –∞–¥—Ä–µ—Å –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø–æ—Ä—Ç –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω: `{current_wan_ip}:{wan_port}`\n```ssh ssh -p {wan_port} {username}@{current_wan_ip}```",
                                                       reply_markup=markup, parse_mode='Markdown')
            await delete_last_bot_messages(bot, message.chat.id)
            await save_bot_message(message.chat.id, sent_message)
        except Exception as e:
            sent_message = await bot.send_message(message.chat.id,
                                                  f"–í–∞—à –≤–Ω–µ—à–Ω–∏–π IP –∞–¥—Ä–µ—Å –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø–æ—Ä—Ç –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω: `{current_wan_ip}:{wan_port}`\n```ssh ssh -p {wan_port} {username}@{current_wan_ip}```",
                                                  reply_markup=markup, parse_mode='Markdown')
            await delete_last_bot_messages(bot, message.chat.id)
            await save_bot_message(message.chat.id, sent_message)
    elif current_wan_ip:
        try:
            sent_message = await bot.edit_message_text(chat_id=message.chat.id, message_id=waiting_message.message_id,
                                                       text=f"–í–∞—à –≤–Ω–µ—à–Ω–∏–π IP –∞–¥—Ä–µ—Å: `{current_wan_ip}:{wan_port}`\n```ssh ssh -p {wan_port} {username}@{current_wan_ip}```",
                                                       reply_markup=markup, parse_mode='Markdown')
            await delete_last_bot_messages(bot, message.chat.id)
            await save_bot_message(message.chat.id, sent_message)
        except Exception as e:
            sent_message = await bot.send_message(message.chat.id,
                                                  f"–í–∞—à –≤–Ω–µ—à–Ω–∏–π IP –∞–¥—Ä–µ—Å: `{current_wan_ip}:{wan_port}`\n```ssh ssh -p {wan_port} {username}@{current_wan_ip}```",
                                                  reply_markup=markup, parse_mode='Markdown')
            await delete_last_bot_messages(bot, message.chat.id)
            await save_bot_message(message.chat.id, sent_message)
    else:
        try:
            sent_message = await bot.edit_message_text(chat_id=message.chat.id, message_id=waiting_message.message_id,
                                                       text="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–Ω–µ—à–Ω–∏–π IP –∞–¥—Ä–µ—Å.", reply_markup=markup)
            await delete_last_bot_messages(bot, message.chat.id)
            await save_bot_message(message.chat.id, sent_message)
        except Exception as e:
            sent_message = await bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–Ω–µ—à–Ω–∏–π IP –∞–¥—Ä–µ—Å.", reply_markup=markup)
            await delete_last_bot_messages(bot, message.chat.id)
            await save_bot_message(message.chat.id, sent_message)

    try:
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    except Exception as e:
        print(f"Failed to delete user message {message.message_id}: {e}")


async def add_user_handler(bot, message: types.Message):
    if message.from_user.id != int(ADMIN_ID):
        await auth_msg(bot, message)
        return

    waiting_message = await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:")
    await save_bot_message(message.chat.id, waiting_message)

    next_step_handlers[message.chat.id] = process_add_user_step

async def process_add_user_step(bot, message: types.Message):
    if message.chat.id not in next_step_handlers or next_step_handlers[message.chat.id] != process_add_user_step:
        return

    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    add_user_btn = types.KeyboardButton('üü¢ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üü¢')
    remove_user_btn = types.KeyboardButton('üî¥ –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üî¥')
    back_btn = types.KeyboardButton('üî∫ –ù–∞–∑–∞–¥ üî∫')
    markup.add(add_user_btn, remove_user_btn, back_btn)

    try:
        new_user_id = int(message.text)
        if await db.user_exists(new_user_id):
            sent_message = await bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_user_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", reply_markup=markup)
        else:
            try:
                user = await bot.get_chat(new_user_id)
                await db.add_user(new_user_id)
                sent_message = await bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_user_id} ({user.username}) –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=markup)
            except Exception as e:
                sent_message = await bot.send_message(message.chat.id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {new_user_id} –≤ Telegram.", reply_markup=markup)
    except ValueError:
        sent_message = await bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", reply_markup=markup)

    await delete_last_bot_messages(bot, message.chat.id)
    await save_bot_message(message.chat.id, sent_message)
    try:
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    except Exception as e:
        print(f"Failed to delete user message {message.message_id}: {e}")

    # –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    del next_step_handlers[message.chat.id]
async def manage_users_menu(bot, message: types.Message):
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    add_user_btn = types.KeyboardButton('üü¢ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üü¢')
    remove_user_btn = types.KeyboardButton('üî¥ –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üî¥')
    back_btn = types.KeyboardButton('üî∫ –ù–∞–∑–∞–¥ üî∫')
    markup.add(add_user_btn, remove_user_btn, back_btn)

    users = await db.get_all_users()
    users_list = '\n'.join(map(str, users)) if users else '–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'

    sent_message = await bot.send_message(message.chat.id, f"–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n{users_list}", reply_markup=markup)
    await delete_last_bot_messages(bot, message.chat.id)
    await save_bot_message(message.chat.id, sent_message)
    try:
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    except Exception as e:
        print(f"Failed to delete user message {message.message_id}: {e}")


async def remove_user_handler(bot, message: types.Message):
    if message.from_user.id != int(ADMIN_ID):
        await auth_msg(bot, message)
        return

    waiting_message = await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    await save_bot_message(message.chat.id, waiting_message)

    next_step_handlers[message.chat.id] = process_remove_user_step

async def process_remove_user_step(bot, message: types.Message):
    if message.chat.id not in next_step_handlers or next_step_handlers[message.chat.id] != process_remove_user_step:
        return

    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    add_user_btn = types.KeyboardButton('üü¢ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üü¢')
    remove_user_btn = types.KeyboardButton('üî¥ –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üî¥')
    back_btn = types.KeyboardButton('üî∫ –ù–∞–∑–∞–¥ üî∫')
    markup.add(add_user_btn, remove_user_btn, back_btn)

    try:
        user_id = int(message.text)
        if await db.user_exists(user_id):
            await db.remove_user(user_id)
            sent_message = await bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –±—ã–ª —É–¥–∞–ª–µ–Ω.", reply_markup=markup)
        else:
            sent_message = await bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=markup)
    except ValueError:
        sent_message = await bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", reply_markup=markup)

    await delete_last_bot_messages(bot, message.chat.id)
    await save_bot_message(message.chat.id, sent_message)
    try:
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    except Exception as e:
        print(f"Failed to delete user message {message.message_id}: {e}")

    # –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    del next_step_handlers[message.chat.id]
async def additional_settings_menu(bot, message: types.Message):
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    force_forward_btn = types.KeyboardButton('üçÄ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–±—Ä–æ—Å–∏—Ç—å –ø–æ—Ä—Ç üçÄ')
    webapp_btn = types.KeyboardButton('‚ùå WEB-APP ssh/ftp ‚ùå')
    back_btn = types.KeyboardButton('üî∫ –ù–∞–∑–∞–¥ üî∫')
    markup.add(force_forward_btn, back_btn) #webapp_btn,
    sent_message = await bot.send_message(message.chat.id, "ü´ß–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ü´ß", reply_markup=markup)
    await delete_last_bot_messages(bot, message.chat.id)
    await save_bot_message(message.chat.id, sent_message)
    try:
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    except Exception as e:
        print(f"Failed to delete user message {message.message_id}: {e}")

async def force_port_forwarding_handler(bot, message: types.Message):
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    waiting_message = await bot.send_message(message.chat.id, "–ü–æ–ª—É—á–µ–Ω–∏–µ IP –∞–¥—Ä–µ—Å–∞...")
    await save_bot_message(message.chat.id, waiting_message)

    force_forward_btn = types.KeyboardButton('üçÄ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–±—Ä–æ—Å–∏—Ç—å –ø–æ—Ä—Ç üçÄ')
    webapp_btn = types.KeyboardButton('‚ùå WEB-APP ssh/ftp ‚ùå')
    back_btn = types.KeyboardButton('üî∫ –ù–∞–∑–∞–¥ üî∫')
    markup.add(force_forward_btn, back_btn) #webapp_btn,

    await setup_port_forwarding(local_ip, local_port, wan_port)
    current_wan_ip = await get_external_ip()

    sent_message = await bot.send_message(message.chat.id, f"–ü–æ—Ä—Ç –±—ã–ª –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ IP: `{current_wan_ip}:{wan_port}`\n```ssh ssh -p {wan_port} {username}@{current_wan_ip}```", parse_mode='Markdown', reply_markup=markup)
    await delete_last_bot_messages(bot, message.chat.id)
    await save_bot_message(message.chat.id, sent_message)
    try:
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    except Exception as e:
        print(f"Failed to delete user message {message.message_id}: {e}")

# async def get_token_handler(bot, message: types.Message):
#     if message.from_user.id != int(ADMIN_ID):
#         await auth_msg(bot, message)
#         return
#
#     new_token = Fernet.generate_key().decode()
#     sent_message = await bot.send_message(message.chat.id, f"–í–∞—à —Ç–æ–∫–µ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞: {new_token}", reply_markup=types.ReplyKeyboardRemove())
#     await delete_last_bot_messages(bot, message.chat.id)
#     await save_bot_message(message.chat.id, sent_message)
#     try:
#         await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
#     except Exception as e:
#         print(f"Failed to delete user message {message.message_id}: {e}")

async def auth_msg(bot, message: types.Message):
    print(f"Handling unauthorized access from {message.from_user.id}")
    sent_message = await bot.send_message(message.chat.id, "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞.", reply_markup=types.ReplyKeyboardRemove())
    await delete_last_bot_messages(bot, message.chat.id)
    await save_bot_message(message.chat.id, sent_message)
    try:
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    except Exception as e:
        print(f"Failed to delete user message {message.message_id}: {e}")
